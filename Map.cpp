#include "Map.h"
#include "../inc/ST7735.h"
#include "Player.h"
extern Player player1;
extern Player player2;

// 8x8 solid wall tile
const uint16_t WallSprite[64] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
  0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
  0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
  0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
  0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
  0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const uint16_t Black[64] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};


const uint16_t BorderSprite[64] = {
  0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF,
  0x7BEF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7BEF,
  0x7BEF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7BEF,
  0x7BEF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7BEF,
  0x7BEF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7BEF,
  0x7BEF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7BEF,
  0x7BEF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7BEF,
  0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF, 0x7BEF
};



// 8x8 coin sprite
const uint16_t CoinSprite[64] = {
  0x0000, 0x0000, 0x0000, 0xFFE0, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0xFFE0, 0xFFFF, 0xFFE0, 0x0000, 0x0000, 0x0000,
  0x0000, 0xFFE0, 0xFFFF, 0xFFE0, 0xFFFF, 0xFFE0, 0x0000, 0x0000,
  0xFFE0, 0xFFFF, 0xFFE0, 0xFFFF, 0xFFE0, 0xFFFF, 0xFFE0, 0x0000,
  0x0000, 0xFFE0, 0xFFFF, 0xFFE0, 0xFFFF, 0xFFE0, 0x0000, 0x0000,
  0x0000, 0x0000, 0xFFE0, 0xFFFF, 0xFFE0, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0xFFE0, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};


const uint16_t SpeedSprite[64] = {
  0x0000, 0x0000, 0x0000, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000,
  0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000,
  0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000,
  0x0000, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000
};




const uint16_t ChaserSprite[64] = {
  0x0000, 0x0000, 0x0000, 0x4208, 0x4208, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x7FFF, 0xFFFF, 0xFFFF, 0x7FFF, 0x0000, 0x0000,
  0x0000, 0x03E0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x03E0, 0x0000,
  0x0000, 0x03E0, 0xFFFF, 0x7FFF, 0x7FFF, 0xFFFF, 0x03E0, 0x0000,
  0x0000, 0x0000, 0x7FFF, 0x03E0, 0x03E0, 0x7FFF, 0x0000, 0x0000,
  0x0000, 0x03E0, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x03E0, 0x0000,
  0x03E0, 0x7FFF, 0x03E0, 0x0000, 0x0000, 0x03E0, 0x7FFF, 0x03E0,
  0x03E0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03E0
};

const uint16_t RunnerSprite[64] = {
  0x0000, 0x0000, 0x0000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0xF800, 0xFFFF, 0xFFFF, 0xF800, 0x0000, 0x0000,
  0x0000, 0x001F, 0xFFFF, 0xF800, 0xF800, 0xFFFF, 0x001F, 0x0000,
  0x0000, 0x001F, 0xF800, 0xFFFF, 0xFFFF, 0xF800, 0x001F, 0x0000,
  0x0000, 0x0000, 0x001F, 0x7BEF, 0x7BEF, 0x001F, 0x0000, 0x0000,
  0x0000, 0x001F, 0x7BEF, 0xF800, 0xF800, 0x7BEF, 0x001F, 0x0000,
  0x001F, 0x7BEF, 0x0000, 0x0000, 0x0000, 0x0000, 0x7BEF, 0x001F,
  0x001F, 0x001F, 0x0000, 0x0000, 0x0000, 0x0000, 0x001F, 0x001F
};




// Map definition (0 = floor, 1 = wall, 2 = coin)
uint8_t map[GRID_HEIGHT][GRID_WIDTH] = {
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
  {2,1,0,1,1,1,1,0,1,1,1,1,0,1,5,2},
  {2,1,0,1,4,0,0,1,0,0,0,1,0,0,0,2},
  {2,1,0,1,0,1,0,1,1,1,0,1,1,1,0,2},
  {2,1,0,0,0,1,0,0,0,1,0,0,0,1,0,2},
  {2,1,1,1,0,1,1,1,0,1,1,1,0,1,1,2},
  {2,1,0,0,4,0,0,1,0,0,0,1,0,0,0,2},
  {2,1,0,1,1,1,1,1,1,1,1,1,1,1,0,2},
  {2,1,0,0,0,1,0,0,0,1,0,0,3,1,0,2},
  {2,1,1,1,0,1,1,1,0,1,1,1,0,1,1,2},
  {2,1,0,0,0,0,0,1,0,0,0,1,0,0,0,2},
  {2,1,0,1,1,1,1,1,1,1,1,1,1,1,0,2},
  {2,1,0,0,0,1,4,0,3,1,0,0,0,1,0,2},
  {2,1,1,1,0,1,1,1,0,1,1,1,0,1,1,2},
  {2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,1,0,1,1,1,1,1,1,1,1,1,1,1,0,2},
  {2,1,0,0,0,0,0,0,0,3,0,0,0,0,0,2},
  {2,6,0,0,0,0,1,1,1,1,0,0,0,0,3,2},
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
};

// theres an extra layer that doesnt show up down here




void DrawMap(void) {
  for (int row = 0; row < GRID_HEIGHT; row++) {
    for (int col = 0; col < GRID_WIDTH; col++) {
      int x = col * TILE_SIZE;
      int y = row * TILE_SIZE;
      switch (map[row][col]) {
        case 1:
          ST7735_DrawBitmap(x, y, WallSprite, TILE_SIZE, TILE_SIZE);
          break;
        case 2:
          ST7735_DrawBitmap(x, y, BorderSprite, TILE_SIZE, TILE_SIZE);
          break;
        case 3:
          ST7735_DrawBitmap(x, y, CoinSprite, TILE_SIZE, TILE_SIZE);
          break;
        case 4:
          ST7735_DrawBitmap(x, y, SpeedSprite, TILE_SIZE, TILE_SIZE);
          break;
        case 5:
          ST7735_DrawBitmap(x, y, ChaserSprite, TILE_SIZE, TILE_SIZE);
          break;
        case 6:
          ST7735_DrawBitmap(x, y, RunnerSprite, TILE_SIZE, TILE_SIZE);
          break;

        // case 0: skip drawing
      }
    }
  }
}


// MENU STUFF
enum MenuSelection { MENU_PLAY, MENU_LANGUAGE, MENU_RULES };
uint8_t currentSelection = MENU_PLAY;
uint8_t language = 0; // 0 = English, 1 = Español
MENU_COUNT = 3;

void DrawMenu(void) {
  ST7735_FillScreen(0x0000); // black background

  // Draw "TAG" logo
  // Option 1: As text
  // ST7735_SetTextColor(0x07FF); // Cyan
  // ST7735_SetCursor(6, 1);
  // ST7735_OutString((char *)"== TAG ==");

  // Option 2: Draw sprite instead (if you create one)
  //DrawLogo(28, 6);

  ST7735_DrawBitmap(50, 80, TAGSprite, 64, 64);


  // Reset color for menu
  ST7735_SetTextColor(0xFFFF); // White

  // Draw buttons
  ST7735_SetCursor(6, 4);
  ST7735_OutString((char *)(currentSelection == MENU_PLAY ? "> Play" : "  Play"));

  ST7735_SetCursor(1, 5);
  ST7735_OutString((char *)(currentSelection == MENU_LANGUAGE ? "> Language: " : "  Language: "));
  ST7735_OutString((char *)(language == 0 ? "English" : "Español"));

  ST7735_SetCursor(6, 6);
  ST7735_OutString((char *)(currentSelection == MENU_RULES ? "> Rules" : "  Rules"));
}

void NavigateMenu(int direction) {
  if (direction == 1) {
    currentSelection = (currentSelection + 1) % MENU_COUNT;
  } else if (direction == -1) {
    currentSelection = (currentSelection - 1 + MENU_COUNT) % MENU_COUNT;
  }
  DrawMenu();
}

void SelectMenuItem(void) {
  switch (currentSelection) {
    case MENU_PLAY:
      DrawMap(); // Implement this function to transition to game
      //StartGame();
      break;
    case MENU_LANGUAGE:
      language = (language + 1) % 2; // Toggle between 0 and 1
      DrawMenu(); // Refresh menu to show new language
      break;
    case MENU_RULES:
      DrawRules(); // Implement this function to show rules screen
      break;
  }
}


#define RULES_PAGE_COUNT 3
uint8_t currentRulesPage = 0;

const char* rulesText[RULES_PAGE_COUNT][6] = {
  {
    "TAG-2P Chasing Game",
    "",
    "1 player is Chaser,",
    "other is Runner.",
    "Collect coins or ",
    "chase!"
  },
  {
    "Controls:",
    "- 2 joysticks to move",
    "- 2 buttons per player",
    "  > Speed Boost",
    "  > Plant mines",
    "  > Missiles (maybe)",
  },
  {
    "Scoring:",
    "+1: Chaser catches",
    "+2: Runner collects all",
    "+1: Runner survives",
    "",
    "First to 3 or 5 wins!"
  }
};


void DrawRules(void) {
  ST7735_FillScreen(0x0000); // Clear to black
  ST7735_SetTextColor(0xFFFF); // White

  for (int i = 0; i < 6; i++) {
    ST7735_SetCursor(0, i);
    ST7735_OutString((char *)rulesText[currentRulesPage][i]);
  }

  ST7735_SetCursor(0, 7);
  ST7735_SetTextColor(0x07E0); // Green
  ST7735_OutString((char *)"Press Btn -> Next");
}
void NextRulesPage(void) {
  currentRulesPage = (currentRulesPage + 1) % RULES_PAGE_COUNT;
  DrawRules();
}

void DrawScores(void){
  ST7735_FillScreen(0x0000); // Clear to black
  ST7735_SetCursor(0, 0);
  ST7735_OutString((char*)"P1:");
  ST7735_OutUDec(player1.getScore());
  
  ST7735_SetCursor(10, 0);
  ST7735_OutString((char*)"P2:");
  ST7735_OutUDec(player2.getScore());
}
